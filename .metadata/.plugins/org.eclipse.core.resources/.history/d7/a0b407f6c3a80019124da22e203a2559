#include "unity.h"
#include "timer.h"



void setUp(void)
{
}

void tearDown(void)
{
}

void test_timer_clk_int_Freq_freq_8MHz_expect_125_ns(void)
{
    int i = clk_int_peiord();

    TEST_ASSERT_EQUAL(125,i);
}


void test_getdtgMultiplier_deadtime_is_3000ns_expect_return_0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 3000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0,result);

}

void test_getdtgMultiplier_deadtime_is_15875ns_expect_return_0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 15875;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0,result);

}

void test_getdtgMultiplier_deadtime_is_15876ns_expect_return_0x0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 15999;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x0,result);

}

void test_getdtgMultiplier_deadtime_is_16000ns_expect_return_0x80(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 16000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x80,result);

}

void test_getdtgMultiplier_deadtime_is_18452ns_expect_return_0x80(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 18452;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x80,result);

}


void test_getdtgMultiplier_deadtime_is_31825ns_expect_return_0x80(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 31999;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x80,result);

}

void test_getdtgMultiplier_deadtime_is_32000ns_expect_return_0xC0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 32000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xC0,result);

}

void test_getdtgMultiplier_deadtime_is_58000ns_expect_return_0xC0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 58000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xC0,result);

}

void test_getdtgMultiplier_deadtime_is_63999ns_expect_return_0xC0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 63999;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xC0,result);

}

void test_getdtgMultiplier_deadtime_is_64000ns_expect_return_0xE0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 64000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xE0,result);

}

void test_getdtgMultiplier_deadtime_is_100000ns_expect_return_0xE0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 100000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xE0,result);

}

void test_getdtgMultiplier_deadtime_is_126999ns_expect_return_0xE0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 126999;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xE0,result);

}

void test_getdtgMultiplier_deadtime_is_127000ns_expect_return_0xE0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 127000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xE0,result);

}

void test_getdtgMultiplier_deadtime_is_300000ns_expect_return_0xE0(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 300000;
	uint8_t result = getdtgMultiplier(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0xE0,result);

}

void test_getdtgBitsVal_deadtime_is_14386ns_expect_return_0x73(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 14386;
	uint8_t result = getdtgBitsVal(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x73,result);

}

void test_getdtgBitsVal_deadtime_is_15875ns_expect_return_0x7F(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 15900;
	uint8_t result = getdtgBitsVal(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x7F,result);

}

void test_getdtgBitsVal_deadtime_is_18020ns_expect_return_0x8(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 18020;
	uint8_t result = getdtgBitsVal(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x8,result);

}

void test_getdtgBitsVal_deadtime_is_31800ns_expect_return_0x3F(void){
	int clk_period = clk_int_peiord();
	int deadtime_ns = 31800;
	uint8_t result = getdtgBitsVal(deadtime_ns,clk_period);

	TEST_ASSERT_EQUAL(0x3F,result);

}
